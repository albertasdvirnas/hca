function rezMaxM = on_compare_dual_label( ...
  barcodeGen, ...
  theoryStruct, ...
  stretchFactors, ...
  numPixelsAroundBestTheoryMask, ...
  sets)

% Change to balance precision/speed
digits(32)

% load theory barcode txt file.
formatSpec = '%f';
fileID = fopen(theoryStruct.filename,'r');
theorBar1 = transpose(fscanf(fileID,formatSpec));
fclose(fileID);
fileID = fopen(theoryStruct.filename2,'r');
theorBar2 = transpose(fscanf(fileID,formatSpec));
fclose(fileID);
try
  fileID = fopen(strrep(theoryStruct.filename, 'barcode', 'bitmask'),'r');
  theorBit = transpose(fscanf(fileID,formatSpec));
  fclose(fileID);
catch
  theorBit = ones(size(theorBar1));
end

% Load zero-model params
theoryNumPixels = 3088286401/sets.pvalue.pixelWidth_nm*sets.pvalue.nmbp;
numStretchFactors = length(stretchFactors);
import CBT.Hca.Import.load_pval_struct;
cbParamsPath = fullfile(sets.pvalue.paramFolder, "cb_zero_model_params.txt");
dotsParamsPath = fullfile(sets.pvalue.paramFolder, ...
  compose("dots_%s_zero_model_params.txt", sets.pvalue.pattern));
[cbPsfInd, cbParams] = load_pval_struct(cbParamsPath);
[dotsPsfInd, dotParams] = load_pval_struct(dotsParamsPath);
try
  cbParamLambda = cbParams{ismember(sets.pvalue.psfSigmaWidth_nm, cbPsfInd)}(1);
  cbParamExa = cbParams{ismember(sets.pvalue.psfSigmaWidth_nm, cbPsfInd)}(2);
  cbParamNu = cbParams{ismember(sets.pvalue.psfSigmaWidth_nm, cbPsfInd)}(3);
catch
  error(compose("Zero-model params for psf: %.2f not found in file: %s", ...
    sets.pvalue.psfSigmaWidth_nm, cbParamsPath));
end
try
  dotParamLambda = dotParams{ismember(sets.pvalue.psfSigmaWidth_nm, dotsPsfInd)}(1);
  dotParamExa = dotParams{ismember(sets.pvalue.psfSigmaWidth_nm, dotsPsfInd)}(2);
  dotParamMu = dotParams{ismember(sets.pvalue.psfSigmaWidth_nm, dotsPsfInd)}(3);
  dotParamXi = dotParams{ismember(sets.pvalue.psfSigmaWidth_nm, dotsPsfInd)}(4);
  dotParamSigma = dotParams{ismember(sets.pvalue.psfSigmaWidth_nm, dotsPsfInd)}(5);
catch
  error(compose("Zero-model params for psf: %.2f not found in file: %s", ...
    sets.pvalue.psfSigmaWidth_nm, dotsParamsPath));
end

rezMaxM = cell(1, size(barcodeGen, 2));
barcodeGenDense = barcodeGen(1, :);
barcodeGenSparse = barcodeGen(2, :);
% for all the barcodes run
for idx=1:size(barcodeGen, 2)
  
  % scoreMax stores the  maximum coefficients
  scoreMax = zeros(3,length(stretchFactors));
  
  % rezMaz stores the results for one barcode
  rezMaxDual = cell(1,length(stretchFactors));
  rezMaxDense = cell(1,length(stretchFactors));
  rezMaxSparse = cell(1,length(stretchFactors));
  
  % length of this barcode
  lenBarTested = length(barcodeGenDense{idx}.rawBarcode);
  
  % run the loop for the stretch factors
  for j=1:length(stretchFactors)
    % here interpolate both barcode and bitmask
    lenBarStretched = round(lenBarTested*stretchFactors(j));
    v = linspace(1, lenBarTested, lenBarStretched);
    barDense = interp1(barcodeGenDense{idx}.rawBarcode, v);
    barSparse = interp1(barcodeGenSparse{idx}.rawBarcode, v);
    
    import DL.Hca.beta_ev_cdf
    xDense = MASS_PCC( ...
      theorBar1, ...
      barDense, ...
      2^(4+nextpow2(lenBarStretched)));
    zDense = nan(size(xDense));
    doZScore = xDense > 0;
    zDense(doZScore) = norminv(beta_ev_cdf( ...
      xDense(doZScore), ...
      max(4, cbParamNu*lenBarStretched), ...
      1, ...
      cbParamLambda*cbParamExa*numStretchFactors*(theoryNumPixels-lenBarStretched)));
    doIncreasedPrecision = isinf(zDense) & zDense > 0;
    zDense(doIncreasedPrecision) = norminv(beta_ev_cdf( ...
      xDense(doIncreasedPrecision), ...
      max(4, cbParamNu*lenBarStretched), ...
      1, ...
      cbParamLambda*cbParamExa*numStretchFactors*(theoryNumPixels-lenBarStretched), ...
      true));
    
    import DL.Hca.trunc_normal_ev_cdf
    xSparse = MASS_DOT_CC( ...
      theorBar2, ...
      barSparse, ...
      2^(4+nextpow2(lenBarStretched)));
    zSparse = nan(size(xSparse));
    doZScore = xSparse > dotParamMu;
    zSparse(doZScore) = norminv(trunc_normal_ev_cdf( ...
      xSparse(doZScore), ...
      norminv(linspace(0.001, 0.999, 10), ...
      dotParamMu, ...
      1/sqrt(dotParamXi*lenBarStretched)), ...
      1/sqrt(dotParamSigma*lenBarStretched), ...
      dotParamLambda*dotParamExa*numStretchFactors*(theoryNumPixels-lenBarStretched), ...
      0, 1));
    doIncreasedPrecision = isinf(zSparse) & zSparse > 0;
    zSparse(doIncreasedPrecision) = norminv(trunc_normal_ev_cdf( ...
      xSparse(doIncreasedPrecision), ...
      norminv(linspace(0.001, 0.999, 10),  ...
      dotParamMu, ...
      1/sqrt(dotParamXi*lenBarStretched)), ...
      1/sqrt(dotParamSigma*lenBarStretched), ...
      dotParamLambda*dotParamExa*numStretchFactors*(theoryNumPixels-lenBarStretched), ...
      0, 1, true));
    
    import CBT.Hca.UI.Helper.get_best_parameters;
    [rezMaxDual{j}.maxcoef, ...
      rezMaxDual{j}.pos, ...
      rezMaxDual{j}.or] = get_best_parameters((zDense + zSparse)/sqrt(2), ...
      3, lenBarStretched, 1, numPixelsAroundBestTheoryMask, ...
      theorBit);
    [rezMaxDense{j}.maxcoef, ...
      rezMaxDense{j}.pos, ...
      rezMaxDense{j}.or] = get_best_parameters(zDense, ...
      3, lenBarStretched, 1, numPixelsAroundBestTheoryMask, ...
      theorBit);
    [rezMaxSparse{j}.maxcoef, ...
      rezMaxSparse{j}.pos, ...
      rezMaxSparse{j}.or] = get_best_parameters(zSparse, ...
      3, lenBarStretched, 1, numPixelsAroundBestTheoryMask, ...
      theorBit);
    
    rezMaxDual{j}.indcoef = [ ...
      arrayfun(@(i) zDense(rezMaxDual{j}.or(i), rezMaxDual{j}.pos(i)), 1:3); ...
      arrayfun(@(i) zSparse(rezMaxDual{j}.or(i), rezMaxDual{j}.pos(i)), 1:3)];
    rezMaxDense{j}.indcoef = [ ...
      arrayfun(@(i) zDense(rezMaxDense{j}.or(i), rezMaxDense{j}.pos(i)), 1:3); ...
      arrayfun(@(i) zSparse(rezMaxDense{j}.or(i), rezMaxDense{j}.pos(i)), 1:3)];
    rezMaxSparse{j}.indcoef = [ ...
      arrayfun(@(i) zDense(rezMaxSparse{j}.or(i), rezMaxSparse{j}.pos(i)), 1:3); ...
      arrayfun(@(i) zSparse(rezMaxSparse{j}.or(i), rezMaxSparse{j}.pos(i)), 1:3)];
    
    scoreMax(1, j) = rezMaxDual{j}.maxcoef(1);
    scoreMax(2, j) = rezMaxDense{j}.maxcoef(1);
    scoreMax(3, j) = rezMaxSparse{j}.maxcoef(1);
  end
  
  [~,b] = nanmax(scoreMax(1,:));
  [~,c] = nanmax(scoreMax(2,:));
  [~,d] = nanmax(scoreMax(3,:));
  rezMaxM{idx}.dual = rezMaxDual{b};
  rezMaxM{idx}.dual.bestBarStretch = stretchFactors(b);
  rezMaxM{idx}.dual.bestLength = round(lenBarTested*stretchFactors(b));
  rezMaxM{idx}.dense = rezMaxDense{c};
  rezMaxM{idx}.dense.bestBarStretch = stretchFactors(c);
  rezMaxM{idx}.dense.bestLength = round(lenBarTested*stretchFactors(c));
  rezMaxM{idx}.sparse = rezMaxSparse{d};
  rezMaxM{idx}.sparse.bestBarStretch = stretchFactors(d);
  rezMaxM{idx}.sparse.bestLength = round(lenBarTested*stretchFactors(d));
  
  disp(num2str([idx rezMaxM{idx}.dual.maxcoef(1) rezMaxM{idx}.dense.maxcoef(1) rezMaxM{idx}.sparse.maxcoef(1)]))
end
